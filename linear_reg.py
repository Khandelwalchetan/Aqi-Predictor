# -*- coding: utf-8 -*-
"""Linear-reg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uvxx2NI-Z0Ub6hNsCuLesh9vdIVPXrOF

Air Quality Index Prediction
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""Dataset --> Reading"""

dataset=pd.read_csv("Data/Data.csv")

#print(dataset.head())

#print(dataset.sample(5))

#print(dataset.shape)

#print(dataset.columns)

#print(dataset['PM 2.5'])

dataset[dataset['PM 2.5'].isnull()]

dataset.fillna(method='ffill', inplace = True)

"""In Data Preprocessing we have to do these steps-->
1) Missing Data
2) Categorical Data
3) Split Train Test
4) Feature scaling (Not required in linear regression)
"""

#dataset.describe()

#visulaising part

# =============================================================================
# import seaborn as sns
# 
# from matplotlib import rcParams
# 
# # figure size in inches
# rcParams['figure.figsize'] = 11.7,8.27
# 
# # Visualising the PM 2.5 Values
# 
# sns.lineplot(data = dataset["PM 2.5"], color="red", label="PM2.5")
# plt.title('Visualising PM2.5 Data')
# plt.show()
# 
# """Removing duplicates value"""
# 
# dataset = dataset[dataset.duplicated() == False]
# 
# print(dataset.shape)
# =============================================================================

#Visualising the PM 2.5 Values

# =============================================================================
# sns.lineplot(data = dataset["PM 2.5"], color="orange", label="PM2.5 (No Duplicates)")
# plt.title('Visualising the PM2.5 Data (with No Duplicates)')
# plt.show()
# =============================================================================



"""Implementing the Algorithm"""

#train test split
from sklearn.model_selection import train_test_split
X=dataset.iloc[:,0:8].values
y= dataset.iloc[:,-1].values

#print(X)

X_train , X_test , y_train ,y_test=train_test_split(X,y, test_size=0.10, random_state = 42 )



"""Linear Regression"""

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()
regressor.fit(X_train , y_train) 
# =============================================================================
# print("regressor.score : ", regressor.score(X_test, y_test))
# print("regressor.coef_ : ",regressor.coef_)
# print("regressor.intercept_ : ",regressor.intercept_)
# =============================================================================

from sklearn import metrics

prediction = regressor.predict(X_test)

print('MAE:', metrics.mean_absolute_error(y_test, prediction))
print('MSE:', metrics.mean_squared_error(y_test, prediction))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))

from sklearn.externals import joblib
joblib.dump(regressor,"linear_regression_model.pkl")

m=joblib.load("linear_regression_model.pkl")
